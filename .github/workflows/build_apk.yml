name: Android CI - 优化构建含中文资源的APK # <--- 确保是小写的 'name'，并且后面有冒号和空格

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 修复Gradle权限
        run: |
          chmod +x gradlew
          [ -x ./gradlew ] || (echo "❌ gradlew权限问题"; exit 1)

      - name: 设置JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: 设置Android SDK
        uses: android-actions/setup-android@v3

      - name: 构建APK (Debug)
        run: |
          ./gradlew assembleDebug \
            --no-daemon \
            --stacktrace \
            --info
          
          if [ ! -d "app/build/outputs/apk" ]; then
            echo "❌ 构建失败，检查Gradle日志"
            exit 1
          fi

      - name: 构建APK (Release) - 推荐生成 AAB
        run: |
          keytool -genkey -v \
            -keystore ci-release-key.jks \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias ci-alias \
            -storepass ci-password \
            -keypass ci-password \
            -dname "CN=CI, OU=CI, O=CI, L=CI, S=CI, C=CI"
          
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=ci-release-key.jks \
            -Pandroid.injected.signing.store.password=ci-password \
            -Pandroid.injected.signing.key.alias=ci-alias \
            -Pandroid.injected.signing.key.password=ci-password \
            --no-daemon \
            --stacktrace \
            --rerun-tasks

      - name: 对齐 Release APK (如果生成了 APK)
        # 注意：这里的条件 if: success() && steps.build-release.outputs.apk-path 需要依赖上一步的 output，
        # 如果你将 bundleRelease 命名为 "构建APK (Release) - 推荐生成 AAB"，那么这里 steps.build-release 就不匹配了。
        # 最简单的做法是直接根据文件是否存在来判断。
        run: |
          echo "安装优化工具..."
          
          RELEASE_APK=$(find app/build/outputs/apk/release -name '*.apk' -print -quit)
          
          if [ -n "$RELEASE_APK" ]; then
            echo "优化Release APK: $RELEASE_APK ..."
            cp "$RELEASE_APK" "$RELEASE_APK.unaligned"
            zipalign -v -p 4 "$RELEASE_APK.unaligned" "$RELEASE_APK"
            echo "✅ Release APK 已对齐."
          else
            echo "ℹ️ 未找到 Release APK 进行 zipalign (可能生成了 AAB)."
          fi

      - name: 验证APK/AAB内容
        run: |
          echo "=== 构建产物验证开始 ==="
          
          DEBUG_APK=$(find app/build/outputs/apk/debug -name '*.apk' -print -quit)
          echo "Debug APK路径: $DEBUG_APK"
          echo "Debug APK大小: $(du -h "$DEBUG_APK" | cut -f1)"
          
          RELEASE_OUTPUT_PATH="app/build/outputs"
          
          RELEASE_APK=$(find "$RELEASE_OUTPUT_PATH/apk/release" -name '*.apk' -print -quit)
          if [ -n "$RELEASE_APK" ]; then
            echo "Release APK路径: $RELEASE_APK"
            echo "Release APK大小: $(du -h "$RELEASE_APK" | cut -f1)"
            if unzip -l "$RELEASE_APK" | grep -q 'values-zh/'; then
              echo "✅ $RELEASE_APK 包含中文资源"
            else
              echo "❌ $RELEASE_APK 缺少中文资源"
              exit 1
            fi
          fi

          RELEASE_AAB=$(find "$RELEASE_OUTPUT_PATH/bundle/release" -name '*.aab' -print -quit)
          if [ -n "$RELEASE_AAB" ]; then
            echo "Release AAB路径: $RELEASE_AAB"
            echo "Release AAB大小: $(du -h "$RELEASE_AAB" | cut -f1)"
            echo "ℹ️ AAB 包含的资源将由 Google Play 生成的 APK 决定，无法直接验证内部语言资源。"
          fi

          if [ -z "$RELEASE_APK" ] && [ -z "$RELEASE_AAB" ]; then
            echo "❌ 未找到 Release 构建产物 (APK 或 AAB)。"
            exit 1
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: optimized-artifacts
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/release/*.apk
            app/build/outputs/bundle/release/*.aab
